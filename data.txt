REST CONTROLLER:RestController: RestController is used for making restful web services with the help of the @RestController annotation. This annotation is used at the class level and allows the class to handle the requests made by the client. Letâ€™s understand @RestController annotation using an example. The RestController allows to handle all REST APIs such as GET, POST, Delete, PUT requests. 

SPRING BOOT:Spring Boot is built on the top of the spring and contains all the features of spring. And is becoming a favorite of developers these days because of its rapid production-ready environment which enables the developers to directly focus on the logic instead of struggling with the configuration and setup. Spring Boot is a microservice-based framework and making a production-ready application in it takes very little time. Following are some of the features of Spring Boot:

It allows avoiding heavy configuration of XML which is present in spring
It provides easy maintenance and creation of REST endpoints
It includes embedded Tomcat-server
Deployment is very easy, war and jar files can be easily deployed in the tomcat server

JPA REPOSITORY:JpaRepository is a JPA (Java Persistence API) specific extension of Repository. It contains the full API of CrudRepository and PagingAndSortingRepository. So it contains API for basic CRUD operations and also API for pagination and sorting,LINK:https://www.geeksforgeeks.org/spring-boot-jparepository-with-example/

password and emailid:https://www.youtube.com/watch?v=b9HMINPB3pg


401:unauthorized forbidden,401 file not found
400:page is not found
200:status
500:internal server error

which of the following annotation of JAX RS API states the HTTP Response generated by we service?
@Produces

Rest is web standards based architecture and uses HTTP Protocol for data communication?
True

Purpose of an URI is to do the DNS lookup?
False
answer :False..
uniform Resource indicator



Difference between DTO & Entity:

Entity is class mapped to table. Dto is class mapped to "view" layer mostly. What needed to store is entity & which needed to 'show' on web page is DTO.

Example : If I want to store employee model as follows : Take employee as an example, I need to store gender either male/female/other. But on JSP I need to show all three values as form 'options' so user can select one.

@Entity
public class Employee{
//annotate with @Id and others

private Long id;
private String name;
private Gender gender; //this is enum viz Male,female
}
//Now extend Dto with employee

public EmployeeDto extends Employee{
Gender[] genders=Gender.values(); //put all gender types in array.
}

while rendering jsp we can give

<select name="gender"> //pointed towards entity gender field.
  <option value="Male">Male</option>
  <option value="Female">Female</option>
  <option value="Other">Other</option>
</select>

then in spring or some other framework whichever selected will be opted as gender in entity.This is made possible because Dto had all three values of gender in it. Similarly, as per situation things follows. As mostly we need most of entity fields on jsp we extend dto by entity.

DTOs are commonly known as objects passing through the architectural boundaries to transfer data. While they can be used to transfer data to the presentation layer, they are not defined by this specific usage.

 DTO can also represent a record in database